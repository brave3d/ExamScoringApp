@model ExamScoringApp.Models.Question
@using ExamScoringApp.Models

@using Microsoft.AspNet.Identity;

@{
    ViewBag.Title = "Create";
    var userId = User.Identity.GetUserId();
    var Exams = (List<Exam>)ViewData["Exams"];

}

<div class="row wrapper border-bottom white-bg page-heading">
    <div class="col-sm-4">
        <h2>Create</h2>
        <ol class="breadcrumb">
            <li>
                @Html.ActionLink("List", "Index")
            </li>
            <li class="active">
                <strong>Create</strong>
            </li>
        </ol>
    </div>
    <div class="col-sm-8">
        <div class="title-action">
            @Html.ActionLink("Back to List", "Index", null, new { @class = "btn btn-primary" })
        </div>
    </div>
</div>



<div class="wrapper wrapper-content animated fadeInRight">
    <div class="row">
        <div class="col-lg-12">
            <div class="ibox float-e-margins">
                <div class="ibox-title">
                    <h5>Create Question</h5>
                </div>
                <div class="ibox-content">

                    @using (Html.BeginForm())
                    {
                        @Html.AntiForgeryToken()

                    <div class="form-horizontal">
                        @Html.ValidationSummary(true)

                        @*<div class="form-group">
            @Html.LabelFor(model => model.ExamId, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                 @Html.EditorFor(model => model.Course)
                <input class="form-control" type="text" value="@Model.ExamId" />
                @Html.ValidationMessageFor(model => model.ExamId)
            </div>
        </div>*@


                        <div class="form-group">
                            @Html.LabelFor(model => model.ExamId, new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                <select id="exams-select" class="form-control">
                                    <option> Select an Exam</option>
                                    @foreach (var item in Exams)
                                    {
                                        <option data-id="@item.Id" name="@item.Course"> @item.Course </option>
                                    }
                                </select>
                                @Html.ValidationMessageFor(model => model.Text)
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.Text, new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.Text)
                                @Html.ValidationMessageFor(model => model.Text)
                            </div>
                        </div>

                        <div class="form-group">
                            <label class="control-label col-md-2" for="Text">Add Blanks</label>
                            <article id="container">
                                @*<p class="info">Select the word/words you want to omit</p>*@
                                <h2 id="question">
                                    Select a word to omit!
                                </h2>
                                <template id="shareBoxTemplate">
                                    <span id="shareBox"><button>Make Blank</button></span>
                                </template>

                            </article>

                            <div id="blanks">
                            </div>
                        </div>



                        <div class="form-group">
                            <div class="col-md-offset-2 col-md-10">

                                @*<input type="submit" value="Create" class="btn btn-primary" />*@
                                @*@Html.ActionLink("Cancel", "Index", null, new { @class = "btn btn-white" })*@
                            </div>
                        </div>
                    </div>
                    }
                    <button type="button" onclick="save()" class="btn btn-primary"> Save </button>
                    <button type="button" onclick="reset()" class="btn btn-warning"> Reset </button>
                    @Html.ActionLink("Cancel", "Index", null, new { @class = "btn btn-white" })


                </div>
            </div>
        </div>
    </div>
</div>



@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}

<script src="~/Content/js/rangy-core.min.js"></script>
<script src="~/Content/js/rangy-classapplier.js"></script>
<script src="~/Content/js/rangy-highlighter.js"></script>

<script src="~/Scripts/draggable/jquery.min.js"></script>
<script src="~/Scripts/sweetalert.min.js"></script>
<script src="~/Content/js/lodash.min.js"></script>

<script src="~/Content/js/script.js"></script>

<script>

    var questionText = "";
    $("#Text").on('input', (e) => {
        //console.log("event triggered", e.target.value);
        $('#question').html(e.target.value);
        questionText = e.target.value;
    });


    function save() {
    var blanks = [];
    var examId = $('#exams-select').find(":selected").attr('data-id');
    BlanksArr = Array.from(document.getElementsByClassName('blank'));
    BlanksArr.forEach(b => blanks.push(
        {
            "AnswerTxt": b.children[0].children[0].value,
            "Score": b.children[1].children[0].value,
            "Index": b.children[2].children[0].value,
        }));
        console.log(blanks);
        const groupedBlanks = _.groupBy(blanks, b => b.Index);
        const finalBlanks = [];
        Object.entries(groupedBlanks).forEach(e => { finalBlanks.push({ "Index": e[0], "PossibleAnswers": e[1] }) })

        //console.log(groupedBlanks);
        //console.log(finalBlanks);

        data = {
            "examId": examId,
            "text": questionText,
            "blanks": finalBlanks,
        }


    $.ajax({
            url: '/Questions/SaveQuestion',
            type: 'POST',
            data: JSON.stringify(data),
            contentType: 'application/json; charset=utf-8',
            success: function (response) {
                //alert();
                if (response.success)
                    advAlert("Success!", response.responseText, "success")
                else
                    advAlert("Error!", response.responseText, "error")
            },
            error: function () {
                advAlert("Error!", "Try again later", "error")
            }
        });

        }

   function advAlert(title, text, type) {
       swal(title, text, type).then((value) => {
           if (type == "success") { window.location.href = window.location.origin + "/Questions/Index/";}
          
       });
    }



</script>