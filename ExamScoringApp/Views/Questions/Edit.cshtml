@model ExamScoringApp.Models.Question
@using ExamScoringApp.Models
@using Microsoft.AspNet.Identity;
@using ExamScoringApp.Helpers

@{
    ViewBag.Title = "Edit";
    var userId = User.Identity.GetUserId();
    var Exams = (List<Exam>)ViewData["Exams"];

}

<div class="row wrapper border-bottom white-bg page-heading">
    <div class="col-sm-4">
        <h2>Edit</h2>
        <ol class="breadcrumb">
            <li>
                @Html.ActionLink("List", "Index")
            </li>
            <li class="active">
                <strong>Edit</strong>
            </li>
        </ol>
    </div>
    <div class="col-sm-8">
        <div class="title-action">
            @Html.ActionLink("Back to List", "Index", null, new { @class = "btn btn-primary" })
        </div>
    </div>
</div>



<div class="wrapper wrapper-content animated fadeInRight">
    <div class="row">
        <div class="col-lg-12">
            <div class="ibox float-e-margins">
                <div class="ibox-title">
                    <h5>Edit Question</h5>
                </div>
                <div class="ibox-content">
                    @if (Model.Blanks.Any() && Model.Blanks.Where(b =>b.StudentAnswers !=null && b.StudentAnswers.Any()).Any())
                    {

                    <div class="alert alert-info alert-dismissable">
                        <button aria-hidden="true" data-dismiss="alert" class="close" type="button">×</button>
                        <h4> You can change clone answers and their scores</h4>
                    </div>
                    <div class="alert alert-warning alert-dismissable">
                        <button aria-hidden="true" data-dismiss="alert" class="close" type="button">×</button>
                        <h4> Adding/Removing blanks will remove students answers if any.</h4>
                    </div>
                    }
                    @using (Html.BeginForm())
                    {
                        @Html.AntiForgeryToken()

                        <div class="form-horizontal">
                            @Html.ValidationSummary(true)

                            @*<div class="form-group">
                    @Html.LabelFor(model => model.ExamId, new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                         @Html.EditorFor(model => model.Course)
                        <input class="form-control" type="text" value="@Model.ExamId" />
                        @Html.ValidationMessageFor(model => model.ExamId)
                    </div>
                </div>*@


                            <div class="form-group">
                                @Html.LabelFor(model => model.ExamId, new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    <select id="exams-select" class="form-control">
                                        <option> Select an Exam</option>
                                        @foreach (var item in Exams)
                                        {
                                            var selected = item.Id == Model.ExamId ? "selected" : "";
                                            <option @selected data-id="@item.Id" name="@item.Course"> @item.Course </option>
                                        }
                                    </select>
                                    @Html.ValidationMessageFor(model => model.Text)
                                </div>
                            </div>


                            <div class="form-group">
                                @Html.LabelFor(model => model.Points, new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.Points)
                                    @Html.ValidationMessageFor(model => model.Points)
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.Text, new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.Text)
                                    @Html.ValidationMessageFor(model => model.Text)
                                </div>
                            </div>

                            <div class="form-group">
                                <label class="control-label col-md-2" for="Text">Add Blanks</label>
                                <article id="container">
                                    @*<p class="info">Select the word/words you want to omit</p>*@
                                    <h2 id="question">
                                        @*@Model.Text*@
                                        @{
                                            var blankIndex = 0;
                                        }
                                        @foreach (var blank in Model.Blanks)
                                        {

                                            @Model.Text.Slice(blankIndex, blank.Index);
                                            <span class="highlight"> @Model.Text.Slice(blank.Index, blank.Index + blank.PossibleAnswers[0].AnswerTxt.Length)</span>
                                            blankIndex = blank.Index + blank.PossibleAnswers[0].AnswerTxt.Length;
                                        }
                                        @Model.Text.Slice(blankIndex, Model.Text.Length)
                                    </h2>
                                    <template id="shareBoxTemplate">
                                        <span id="shareBox"><button>Make Blank</button></span>
                                    </template>

                                </article>

                                <div id="blanks">
                                    @foreach (var item in Model.Blanks)
                                    {
                                        int i = 0;
                                        foreach (var possibleAnswer in item.PossibleAnswers)
                                        {
                                            var disabled = i == 0 ? "disabled" : "";
                                            <div class="blank" id="@possibleAnswer.GetHashCode()">
                                                <label> Answer <input class="form-control" type="text" @disabled value="@possibleAnswer.AnswerTxt"></label>
                                                <label> Score %  <input class="form-control" type="number" value="@possibleAnswer.Score" max="100" min="0" placeholder="score"></label>
                                                <label> Index  <input class="form-control" type="number" value="@item.Index" placeholder="index" disabled="disabled"></label>
                                                <button type="button" class="btn btn-default" onclick="copy('@possibleAnswer.GetHashCode()')">Clone</button>
                                            </div>
                                            i++;
                                        }
                                    }
                                </div>
                            </div>



                            <div class="form-group">
                                <div class="col-md-offset-2 col-md-10">

                                    @*<input type="submit" value="Create" class="btn btn-primary" />*@
                                    @*@Html.ActionLink("Cancel", "Index", null, new { @class = "btn btn-white" })*@
                                </div>
                            </div>
                        </div>
                    }
                    <button type="button" onclick="save()" class="btn btn-primary"> Save </button>
                    <button type="button" onclick="reset()" class="btn btn-warning"> Reset </button>
                    @Html.ActionLink("Cancel", "Index", new { examId = Request.QueryString["examId"] }, new { @class = "btn btn-white" })


                </div>
            </div>
        </div>
    </div>
</div>



@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
    
<script src="~/Content/js/rangy-core.min.js"></script>
<script src="~/Content/js/rangy-classapplier.js"></script>
<script src="~/Content/js/rangy-highlighter.js"></script>

<script src="~/Scripts/draggable/jquery.min.js"></script>
<script src="~/Scripts/sweetalert.min.js"></script>
<script src="~/Content/js/lodash.min.js"></script>

<script src="~/Content/js/script.js"></script>
