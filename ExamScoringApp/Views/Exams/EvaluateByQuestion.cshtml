@using ExamScoringApp.Helpers
@model ExamScoringApp.Models.Base.EvaluateVM
@{
    ViewBag.Title = "EvaluateByQuestion";
}

<div class="row wrapper border-bottom white-bg page-heading">
    <div class="col-sm-4">
        <h2>EvaluateByQuestion</h2>
        <ol class="breadcrumb">
            <li>
                @Html.ActionLink("List", "Index")
            </li>
            <li class="active">
                <strong>EvaluateByQuestion</strong>
            </li>
        </ol>
    </div>
</div>

<div class="wrapper wrapper-content animated fadeInRight">
    <div class="row">
        <div class="col-lg-12">
            <div class="ibox float-e-margins">
                <div class="ibox-title">
                    <h5>EvaluateByQuestion</h5>
                </div>
                <div class="ibox-content">
                    <dl class="dl-horizontal">


                        <dt>
                            @Html.DisplayNameFor(model => model.Exam.Course)
                        </dt>
                        <dd>

                            @Html.DisplayFor(model => model.Exam.Course)
                        </dd>

                        <dt>
                            @Html.DisplayNameFor(model => model.SelectedQuestion.Text)
                        </dt>
                        <dd>
                            @Html.DisplayFor(model => model.SelectedQuestion.Text)
                        </dd>

                    </dl>

                    <p>Students' Answers : </p>

                    <div class="m-b-lg question-text">
                        <div class="q-cont">
                            <div class="q-text">
                                @*@Html.DisplayFor(model => model.Year)*@
                                @{
                                    var blankIndex = 0;
                                }
                                @foreach (var blank in Model.SelectedQuestion.Blanks)
                                {

                                    @Model.SelectedQuestion.Text.Slice(blankIndex, blank.Index);
                                    <span class="highlight"> @Model.SelectedQuestion.Text.Slice(blank.Index, blank.Index + blank.PossibleAnswers[0].AnswerTxt.Length)</span>
                                    blankIndex = blank.Index + blank.PossibleAnswers[0].AnswerTxt.Length;

                                }
                                @Model.SelectedQuestion.Text.Slice(blankIndex, Model.SelectedQuestion.Text.Length)
                            </div>
                            <div class="points">
                                @Model.SelectedQuestion.Points Points
                            </div>
                        </div>

                    </div>

                    <div class="students-answers">

                        <table id="table" class="table table-striped">
                            <thead>
                                <tr>
                                    <th>
                                        No
                                    </th>
                                    <th>
                                        Correct Answers
                                    </th>
                                    <th>
                                        Student Answer
                                    </th>
                                    <th>
                                        Student Name
                                    </th>
                                    <th>
                                        Student Number
                                    </th>
                                    <th>
                                        Student Score
                                    </th>
                                    <th style="width: 25%;"> </th>
                                </tr>
                            </thead>

                            @{ int l = 1;}


                            @foreach (var blank in Model.SelectedQuestion.Blanks)
                            {

                                foreach (var student in Model.Students)
                                {

                                    <tr>
                                        <td>
                                            @Html.DisplayFor(modelItem => l)
                                        </td>
                                        <td>
                                            @{
                                                var possibleAnswers = "";
                                                foreach (var pa in blank.PossibleAnswers)
                                                {
                                                    possibleAnswers += pa.AnswerTxt + " " + pa.Score + ", ";
                                                }
                                                possibleAnswers = possibleAnswers.Substring(0, possibleAnswers.Length - 1);
                                                var studentAnswer = blank.StudentAnswers?.Where(a => a.StudentId == new MongoDB.Bson.ObjectId(student.Id)).FirstOrDefault();

                                            }

                                            @possibleAnswers
                                        </td>
                                        <td>
                                            @if (studentAnswer != null)
                                            {
                                                <b>  @studentAnswer.AnswerTxt </b>

                                            }
                                            else
                                            {
                                                <text>  No answer </text>
                                            }
                                        </td>
                                        <td>
                                            @student.StudentName
                                        </td>
                                        <td>
                                            @student.StudentNo
                                        </td>

                                        <td>
                                            @if (studentAnswer != null)
                                            {
                                                <b> @studentAnswer.Score</b>

                                            }
                                            else
                                            {
                                                <text> 0 </text>
                                            }
                                        </td>


                                        <td>

                                            @if (User.IsInRole("Admin") && studentAnswer != null)
                                            {

                                                <button onclick="addToPossibleAnswers(questionId = '@Model.SelectedQuestion.Id', examId = '@Model.Exam.Id', studentAnswer = '@studentAnswer.AnswerTxt', blankIndex = '@Model.SelectedQuestion.Blanks.IndexOf(blank)')" class="btn btn-info btn-xs">
                                                    Add to possible answers
                                                </button>
                                                @*@Html.ActionLink("Add to possible answers", "AddToPossibleAnswers", new { }, new { @class = "btn btn-info btn-xs" })*@

                                            }

                                        </td>
                                    </tr>
                                    l++;

                                }


                            }

                        </table>
                    </div>

                    @*<button type="button" onclick="save()" class="btn btn-primary"> Save </button>*@
                    @*<button type="button" onclick="reset()" class="btn btn-warning"> Reset </button>*@
                    @Html.ActionLink("Back", "Evaluate", new { id = Model.Exam.Id }, new { @class = "btn btn-white" })




                </div>
            </div>
        </div>
    </div>
</div>

<script src="~/Scripts/sweetalert.min.js"></script>
<script>
    function addToPossibleAnswers(questionId, examId, studentAnswer, blankIndex) {
        prompt(studentAnswer).then(score => {
        data = {
        "QuestionId": questionId,
        "ExamId": examId,
        "AnswerTxt": studentAnswer,
        "Score": score,
        "BlankIndex": blankIndex
    }

    $.ajax({
        url: urlPrefix + '/Exams/AddToPossibleAnswers',
        type: 'POST',
        data: JSON.stringify(data),
        contentType: 'application/json; charset=utf-8',
        success: function (response) {
            //alert();
            if (response.success)
                advAlert("Success!", response.responseText, "success")
            else
                advAlert("Error!", response.responseText, "error")
        },
        error: function () {
            advAlert("Error!", "Try again later", "error")
        }
             });
        });

      
    }


    function advAlert(title, text, type, requestExamId=null) {
        swal(title, text, type);
    }


    function prompt(studentAnswer) {
        return new Promise((resolve,reject)=>{
              swal({
            title: "Score",
            text : `Please enter a score for "${studentAnswer}"`,
                 content: {
                element: "input",
                attributes: {
                 placeholder: "Enter a number",
                  type: "number",
                },
              },
               contentplaceholder:"asdsa",
               buttons: [
                   "cancel",
                   "Ok"
               ]
           }).then((value) => {
               if (value != null && (value == "" || isNaN(parseInt(value)) || parseInt(value) < 0 || parseInt(value) > 100)) {
                   swal("Input Error", "Please enter a value between 0 and 100", "error").then(() => prompt(studentAnswer, score));
                   reject(value);
               }
               else {
                   resolve(value);
               }
           });
        });
         
    }

</script>











