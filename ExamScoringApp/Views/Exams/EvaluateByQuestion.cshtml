@using ExamScoringApp.Helpers
@model ExamScoringApp.Models.Base.EvaluateVM
@{
    ViewBag.Title = "EvaluateByQuestion";
}

<div class="row wrapper border-bottom white-bg page-heading">
    <div class="col-sm-4">
        <h2>EvaluateByQuestion</h2>
        <ol class="breadcrumb">
            <li>
                @Html.ActionLink("List", "Index")
            </li>
            <li class="active">
                <strong>EvaluateByQuestion</strong>
            </li>
        </ol>
    </div>
</div>

<div class="wrapper wrapper-content animated fadeInRight evaluateByQuestion">
    <div class="row">
        <div class="col-lg-12">
            <div class="ibox float-e-margins">
                <div class="ibox-title">
                    <h5>EvaluateByQuestion</h5>
                </div>
                <div class="ibox-content">
                    <dl class="dl-horizontal">


                        <dt>
                            @Html.DisplayNameFor(model => model.Exam.Course)
                        </dt>
                        <dd>

                            @Html.DisplayFor(model => model.Exam.Course)
                        </dd>

                        <dt>
                            Question
                        </dt>
                        <dd>
                            <div class="m-b-lg question-text">
                                <div class="q-cont">
                                    <div class="q-text">
                                        @*@Html.DisplayFor(model => model.Year)*@
                                        @{
                                            var blankIndex = 0;
                                        }
                                        @foreach (var blank in Model.SelectedQuestion.Blanks)
                                        {

                                            @Model.SelectedQuestion.Text.Slice(blankIndex, blank.Index);
                                            <span class="highlight"> @Model.SelectedQuestion.Text.Slice(blank.Index, blank.Index + blank.PossibleAnswers[0].AnswerTxt.Length)</span>
                                            blankIndex = blank.Index + blank.PossibleAnswers[0].AnswerTxt.Length;

                                        }
                                        @Model.SelectedQuestion.Text.Slice(blankIndex, Model.SelectedQuestion.Text.Length)
                                    </div>
                                    <div class="points">
                                        @Model.SelectedQuestion.Points Points
                                    </div>
                                </div>

                            </div>
                        </dd>

                        <dt>
                            Correct Answers
                        </dt>
                        <dd>
                            @Html.Partial("Master/QuestionBlanks", Model.SelectedQuestion)
                        </dd>


                        <dt>
                            Students' Answers
                        </dt>
                        <dd>
                            <div class="students-answers">

                                <table id="table" class="table table-bordered custom-table students-answers">
                                   
                                        @foreach (var answer in Model.StudentsAnswers)
                                        {

                                            if (answer.AnswerTxt != null)
                                            {
                                                <tr>
                                                    <td style="width:50%">

                                                        <b>@answer.AnswerTxt</b>
                                                    </td>

                                                    <td>
                                                        <input id="@answer.GetHashCode()" class="score-input form-control" value="@answer.Score" type="number" min="0" max="100" />
                                                        <span>%</span>

                                                    </td>

                                                    <td style="background: none;border-bottom: none;">

                                                        @if (User.IsInRole("Admin"))
                                                        {
                                                            <button onclick="addToPossibleAnswers(questionId = '@Model.SelectedQuestion.Id', examId = '@Model.Exam.Id', studentAnswer = '@answer.AnswerTxt', blankIndex = '@answer.BlankIndex',scoreId='@answer.GetHashCode()')" class="btn btn-info btn-xs">
                                                                Add to possible answers
                                                            </button>
                                                        }

                                                    </td>

                                                </tr>
                                            }


                                        }

                                </table>
                            </div>
                        </dd>



                    </dl>

                    @Html.ActionLink("Back", "Evaluate", new { id = Model.Exam.Id }, new { @class = "btn btn-white" })




                </div>
            </div>
        </div>
    </div>
</div>

<script src="~/Scripts/sweetalert.min.js"></script>
<script>
    function addToPossibleAnswers(questionId, examId, studentAnswer, blankIndex, scoreId) {
        var score = document.getElementById(scoreId).value;
        data = {
        "QuestionId": questionId,
        "ExamId": examId,
        "AnswerTxt": studentAnswer,
        "Score": score,
        "BlankIndex": blankIndex
        }


    $.ajax({
        url: urlPrefix + '/Exams/AddToPossibleAnswers',
        type: 'POST',
        data: JSON.stringify(data),
        contentType: 'application/json; charset=utf-8',
        success: function (response) {
            //alert();
            if (response.success)
                advAlert("Success!", response.responseText, "success")
            else
                advAlert("Error!", response.responseText, "error")
        },
        error: function () {
            advAlert("Error!", "Try again later", "error")
        }
             });

      
    }


    function advAlert(title, text, type, requestExamId=null) {
        swal(title, text, type).then(() => {
             if (type == "success") {
                window.location.reload();
             }
        })
       
    }


    function prompt(studentAnswer) {
        return new Promise((resolve,reject)=>{
              swal({
            title: "Score",
            text : `Please enter a score for "${studentAnswer}"`,
                 content: {
                element: "input",
                attributes: {
                 placeholder: "Enter a number",
                  type: "number",
                },
              },
               contentplaceholder:"asdsa",
               buttons: [
                   "cancel",
                   "Ok"
               ]
           }).then((value) => {
               if (value != null && (value == "" || isNaN(parseInt(value)) || parseInt(value) < 0 || parseInt(value) > 100)) {
                   swal("Input Error", "Please enter a value between 0 and 100", "error").then(() => prompt(studentAnswer, score));
                   reject(value);
               }
               else {
                   resolve(value);
               }
           });
        });
         
    }

</script>











